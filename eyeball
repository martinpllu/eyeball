if [ "$#" -ne 2 ]; then
    echo "Usage: eyeball <program> <outputfile>"
    exit 1
fi

COMMAND=$1
FILE=$2
EXPECTED_FILE=$FILE
ACTUAL_FILE=$FILE.eyeball

DIFF_COMMAND="git --no-pager diff --color-words --no-index"
# colordiff $ACTUAL_FILE $EXPECTED_FILE

if [ ! -f $EXPECTED_FILE ]; then
    eval $COMMAND 2>&1 | tee $EXPECTED_FILE
    echo ">>> eyeball: Created '$EXPECTED_FILE'"
    exit 0
fi

eval $COMMAND 2>&1 | tee $ACTUAL_FILE 

ACTUAL_FILE_LINES=$(cat $ACTUAL_FILE | wc -l | xargs)
EXPECTED_FILE_LINES=$(cat $EXPECTED_FILE | wc -l | xargs)

let TOO_FEW_OUTPUT_LINES=`bc <<< "scale=100; ($ACTUAL_FILE_LINES / $EXPECTED_FILE_LINES) < 0.1"`
if [ $TOO_FEW_OUTPUT_LINES == 1 ] ; then
  echo ">>> eyeball: Output much shorter than expected (expected $EXPECTED_FILE_LINES lines, saw $ACTUAL_FILE_LINES lines). Not showing diff."
  echo ">>> eyeball: To see the diff run '$DIFF_COMMAND $EXPECTED_FILE $ACTUAL_FILE'"
  echo ">>> eyeball: Run 'eyeball-update $2' to update expected output."
  exit 1
fi

$DIFF_COMMAND $EXPECTED_FILE $ACTUAL_FILE
DIFF_EXIT_CODE=$?

if [ $DIFF_EXIT_CODE == 0 ] ; then
  echo ">>> eyeball: no change"
  rm $ACTUAL_FILE
else
  echo ">>> eyeball: DIFFERENCES DETECTED. Run 'eyeball-update $2' to update expected output."
  exit 1
fi